 /*Write a progrram to pass a String and a Integer number in a method and return a String : 

	 Input String			Input Integer		Output String

	"aaaabbbbababbb"			2				"aabbababb"
	"aabbaaababb"			3				"aabbaaababb"
	"aabbaabaa"				1				"ababa"
*/

import java.util.*;
public class Main(){
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the input String");
        String inputString = sc.nextLine();
        System.out.println("Enter the input Integer");
        int n = sc.nextInt();
        StringBuilder sb = new StringBuilder();
        int count = 1;
        for(int i =1; i<sb.length();i++){
           if(sb.charAt(i)== sb.charAt(i-1)){
            count++;
            if(count==n){
                sb.delete(i-(n-1),i+1);
                i=i-n+1;
                count=1;
            }else{
                count=1;
            }
           }
           System.out.println("Output:" + sb.toString);
        }
    }
}

-------------------------------------------------------------------------------------

/*Q3) Print the given patern

*
* *
* * *
* * * * 
* * *	* * 
* * * * 
* * *
* *
*
*/

class Pattern{
    public static void main(String args[]){
        int n=5;
        for(int i=1;i<=n;i++){
             for(int j=1;j<=i;i++){
                System.out.println(" * ");
             }
             System.out.println();
        }
         for(int i=n-1;i>=1;i--){
            for(int j=1;j<=1;j++){
                System.out.println(" * ");
            }
         }
        System.out.println();
    }
}

-------------------------------------------------------------------------------------------------

Q.1  /*  ==API : https://dummyjson.com/products

==Configure Database : Mysql
	
a) Create CRUD operation Rest API(Add, Fetch, Update, Delete)
b) Retrieve the data from the above API and save into the database
c) Create an API to get the data from the database with pagination. ilter on given fields : title, brand, category, price(between min and max), stock(between min and max) */


@Entity
@Table(name = "products")
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;
    private String brand;
    private String category;
    private int price;
    private int stock;


}
public interface ProductRepository extends JpaRepository<Product, Long> {
    
    List<Product> findByTitleContainingAndBrandContainingAndCategoryContainingAndPriceBetweenAndStockBetween(
            String title, String brand, String category, int minPrice, int maxPrice, int minStock, int maxStock,
            Pageable pageable);
}

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

   
    public Product addProduct(Product product) {
        return productRepository.save(product);
    }

    public Product getProduct(Long id) {
        return productRepository.findById(id).orElse(null);
    }

    public Product updateProduct(Long id, Product product) {
        Product existingProduct = getProduct(id);
        if (existingProduct != null) {
            existingProduct.setTitle(product.getTitle());
            existingProduct.setBrand(product.getBrand());
            existingProduct.setCategory(product.getCategory());
            existingProduct.setPrice(product.getPrice());
            existingProduct.setStock(product.getStock());
            return productRepository.save(existingProduct);
        }
        return null;
    }

    public void deleteProduct(Long id) {
        productRepository.deleteById(id);
    }

   
    public List<Product> getProducts(String title, String brand, String category, int minPrice, int maxPrice,
            int minStock, int maxStock, int page, int size) {
        Pageable pageable = PageRequest.of(page, size);
        return productRepository.findByTitleContainingAndBrandContainingAndCategoryContainingAndPriceBetweenAndStockBetween(
                title, brand, category, minPrice, maxPrice, minStock, maxStock, pageable);
    }
}

@RestController
@RequestMapping("/products")
public class ProductController {
    @Autowired
    private ProductService productService;

  
    @PostMapping
    public Product addProduct(@RequestBody Product product) {
        return productService.addProduct(product);
    }

    @GetMapping("/{id}")
    public Product getProduct(@PathVariable Long id) {
        return productService.getProduct(id);
    }

    @PutMapping("/{id}")
    public Product updateProduct(@PathVariable Long id, @RequestBody Product product) {
        return productService.updateProduct(id, product);
    }

    @DeleteMapping("/{id}")
    public void deleteProduct(@PathVariable Long id) {
        productService.deleteProduct(id);
    }


    @GetMapping
    public ResponseEntity<List<Product>> getProducts(@RequestParam(required = false) String title,
            @RequestParam(required = false) String brand, @RequestParam(required = false) String category,
            @RequestParam(required = false, defaultValue = "0") int min_price,
            @RequestParam(required = false, defaultValue = "999999") int max_price,
            @RequestParam(required = false, defaultValue = "0") int min_stock,
            @RequestParam(required = false, defaultValue = "999999") int max_stock,
            @RequestParam(defaultValue = "0") int page, @RequestParam(defaultValue = "10") int size) {
        List<Product> products = productService.getProducts(title, brand, category, min_price
